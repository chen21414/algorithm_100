// 2. Add Two Numbers
// Medium

// 20228

// 4035

// Add to List

// Share
// You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

// You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

// Example 1:


// Input: l1 = [2,4,3], l2 = [5,6,4]
// Output: [7,0,8]
// Explanation: 342 + 465 = 807.
// Example 2:

// Input: l1 = [0], l2 = [0]
// Output: [0]
// Example 3:

// Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
// Output: [8,9,9,9,0,0,0,1]
//https://leetcode.com/problems/add-two-numbers/

//https://leetcode.com/problems/add-two-numbers/discuss/1981616/Clear-and-concise-solution-100ms
//https://leetcode.com/problems/add-two-numbers/discuss/1343361/JavaScript-Fast-Detail-explanation-Clean-Code-Solution



// Input: l1 = [2,4,3], l2 = [5,6,4]
//ListNode is something like this
class ListNode {
    constructor(data) {
      this.data = data;
      this.next = null;
    }
}

var addTwoNumbers = function (l1, l2) {
    let newNode = new ListNode(0);
    let head = newNode; //take a variable head and make it equal to newNode. A node which is pointing to nothing. Floating in universe.
                        //This head which is pointing to nothing indicates that our sum is nothing initially, When we will start addition we will use this head to store our sum
    let carry = 0;
  
    while (l1 || l2) {
      let a = l1 && l1.val; //let "a" or first value is "2" from 243 and b or second value be "5" from 564.
      let b = l2 && l2.val;
      let sum = a + b + carry;
    // if the sum is lesser than 10 put it into sum
    // but if it is greater or equal to 10, put the last digit from that 2 digit number into sum and the first digit into carry.
    // For example, if we add 2 numbers and get suppose 13, we put 3 into sum and 1 in carry.
  
      carry = Math.floor(sum / 10);
      head.next = new ListNode(sum % 10);//getting remainder
      //Above line says if sum is greater than 10 make variable head point to its last digit in above case, 7 is a single digit num so head will point to 7.
  
      if (l1) l1 = l1.next;
      if (l2) l2 = l2.next;
  
      head = head.next;
    }


    if (carry > 0) head.next = new ListNode(carry);
    return newNode.next;

    // why newNode.next is returning the answer???????????

    // newNode was poiting to nothing but newNode.next is ??????
    // The first digit of our sum which is generated by head.

    // This is because if we use newNode only it will move forward to add nums, 
    // so when we will return newNode at last it will only give last digit of the result sum, but if we use another variable "head" or "xyz" and now return newNode it will return head of "head" variable and when we return head of any linked-list, 
    // it returns whole linked-list i.e we will get whole sum or result sum.


    // Lastely if(carry > 0) head.next = new ListNode(carry);
    // this line is saying after adding last digits of the num we get some carry,
    // So create a new node and put it into sum.
  };
